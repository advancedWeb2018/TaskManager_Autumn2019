@using MakeIt.WebUI.ViewModel.Account
@model RegisterViewModel
@{
    ViewBag.Title = "MakeIt";
}

@using (Html.BeginForm("Register", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @role = "form", id = "RegisterForm" }))
{
    @Html.AntiForgeryToken()
    <div class="login-panel panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Please Register on MakeIt</h3>
        </div>
        <div class="panel-body">
            <form role="form">
                <fieldset>
                    <div class="username form-group">
                        @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", placeholder = "Username" })
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState["UserName"].Errors.Count != 0)
                        {
                            <span class="field-validation-valid text-danger" data-valmsg-for="UserName" data-valmsg-replace="true"><span>@ViewData.ModelState["UserName"].Errors[0].ErrorMessage</span></span>
                        }
                        else
                        {
                            @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
                        }
                    </div>
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "E-mail" })
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Email"].Errors.Count != 0)
                        {
                            <span class="field-validation-valid text-danger" data-valmsg-for="Email" data-valmsg-replace="true"><span>@ViewData.ModelState["Email"].Errors[0].ErrorMessage</span></span>
                        }
                        else
                        {
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        }
                    </div>
                    <div class="form-group append-bottom-20" id="password-strength">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password" })
                        @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Password"].Errors.Count != 0)
                        {
                            <span class="field-validation-valid text-danger" data-valmsg-for="Password" data-valmsg-replace="true"><span>@ViewData.ModelState["Password"].Errors[0].ErrorMessage</span></span>
                        }
                        else
                        {
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                        }
                        <p class="gl-field-hint text-secondary">Minimum length is 8 characters</p>
                    </div>
                    <div class="form-group append-bottom-20" id="password-strength">
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm password" })
                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                    <button type="submit" value="enter" 
                            class="g-recaptcha btn btn-lg btn-success btn-block" 
                            data-sitekey="@Model.RecaptchaPublicKey"
                            data-callback="OnSubmit"
                            >
                    Register</button>
                </fieldset>
            </form>
        </div>
    </div>
}


@section Scripts {
    <script>
        function OnSubmit(token) {
            document.getElementById("RegisterForm").submit();
        }
    </script>
}